// Mocks generated by Mockito 5.4.3 from annotations
// in biot/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i20;
import 'dart:io' as _i10;
import 'dart:ui' as _i16;

import 'package:biot/constants/enum.dart' as _i19;
import 'package:biot/model/chart_data.dart' as _i4;
import 'package:biot/model/condition.dart' as _i7;
import 'package:biot/model/device.dart' as _i28;
import 'package:biot/model/domain_weight_distribution.dart' as _i5;
import 'package:biot/model/encounter.dart' as _i27;
import 'package:biot/model/kLevel.dart' as _i6;
import 'package:biot/model/outcome_measure_collection.dart' as _i12;
import 'package:biot/model/outcome_measure_info.dart' as _i2;
import 'package:biot/model/outcome_measures/outcome_measure.dart' as _i8;
import 'package:biot/model/patient.dart' as _i21;
import 'package:biot/model/peripheral_device.dart' as _i26;
import 'package:biot/model/question_collection.dart' as _i3;
import 'package:biot/services/app_locale_service.dart' as _i37;
import 'package:biot/services/cloud_service.dart' as _i24;
import 'package:biot/services/database_service.dart' as _i29;
import 'package:biot/services/file_saver_service.dart' as _i36;
import 'package:biot/services/file_service.dart' as _i32;
import 'package:biot/services/logger_service.dart' as _i38;
import 'package:biot/services/outcome_measure_load_service.dart' as _i34;
import 'package:biot/services/outcome_measure_selection_service.dart' as _i33;
import 'package:biot/services/package_info_service.dart' as _i31;
import 'package:biot/services/pdf_service.dart' as _i35;
import 'package:biot/services/shared_preferences_service.dart' as _i30;
import 'package:flutter/material.dart' as _i23;
import 'package:hive_flutter/hive_flutter.dart' as _i9;
import 'package:http/http.dart' as _i25;
import 'package:intl/intl.dart' as _i13;
import 'package:logger/logger.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i18;
import 'package:pdf_merger/pdf_merger.dart' as _i14;
import 'package:share_plus/share_plus.dart' as _i15;
import 'package:stacked/stacked.dart' as _i11;
import 'package:stacked_services/stacked_services.dart' as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOutcomeMeasureInfo_0 extends _i1.SmartFake
    implements _i2.OutcomeMeasureInfo {
  _FakeOutcomeMeasureInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuestionCollection_1 extends _i1.SmartFake
    implements _i3.QuestionCollection {
  _FakeQuestionCollection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimeSeriesChartData_2 extends _i1.SmartFake
    implements _i4.TimeSeriesChartData {
  _FakeTimeSeriesChartData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDomainWeightDistribution_3 extends _i1.SmartFake
    implements _i5.DomainWeightDistribution {
  _FakeDomainWeightDistribution_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKLevel_4 extends _i1.SmartFake implements _i6.KLevel {
  _FakeKLevel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCondition_5 extends _i1.SmartFake implements _i7.Condition {
  _FakeCondition_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutcomeMeasure_6 extends _i1.SmartFake
    implements _i8.OutcomeMeasure {
  _FakeOutcomeMeasure_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_7<E> extends _i1.SmartFake implements _i9.Box<E> {
  _FakeBox_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_8 extends _i1.SmartFake implements _i10.File {
  _FakeFile_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveValue_9<T> extends _i1.SmartFake
    implements _i11.ReactiveValue<T> {
  _FakeReactiveValue_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutcomeMeasureCollection_10 extends _i1.SmartFake
    implements _i12.OutcomeMeasureCollection {
  _FakeOutcomeMeasureCollection_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberFormat_11 extends _i1.SmartFake implements _i13.NumberFormat {
  _FakeNumberFormat_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMergeMultiplePDFResponse_12 extends _i1.SmartFake
    implements _i14.MergeMultiplePDFResponse {
  _FakeMergeMultiplePDFResponse_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShareResult_13 extends _i1.SmartFake implements _i15.ShareResult {
  _FakeShareResult_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_14 extends _i1.SmartFake implements _i16.Locale {
  _FakeLocale_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_15 extends _i1.SmartFake implements _i17.Logger {
  _FakeLogger_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OutcomeMeasure].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutcomeMeasure extends _i1.Mock implements _i8.OutcomeMeasure {
  MockOutcomeMeasure() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.OutcomeMeasureInfo get info => (super.noSuchMethod(
        Invocation.getter(#info),
        returnValue: _FakeOutcomeMeasureInfo_0(
          this,
          Invocation.getter(#info),
        ),
      ) as _i2.OutcomeMeasureInfo);

  @override
  set info(_i2.OutcomeMeasureInfo? _info) => super.noSuchMethod(
        Invocation.setter(
          #info,
          _info,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.DomainType get domainType => (super.noSuchMethod(
        Invocation.getter(#domainType),
        returnValue: _i19.DomainType.goals,
      ) as _i19.DomainType);

  @override
  set domainType(_i19.DomainType? _domainType) => super.noSuchMethod(
        Invocation.setter(
          #domainType,
          _domainType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get estTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#estTimeToComplete),
        returnValue: 0,
      ) as int);

  @override
  set estTimeToComplete(int? _estTimeToComplete) => super.noSuchMethod(
        Invocation.setter(
          #estTimeToComplete,
          _estTimeToComplete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isAssistantNeeded => (super.noSuchMethod(
        Invocation.getter(#isAssistantNeeded),
        returnValue: false,
      ) as bool);

  @override
  set isAssistantNeeded(bool? _isAssistantNeeded) => super.noSuchMethod(
        Invocation.setter(
          #isAssistantNeeded,
          _isAssistantNeeded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tags(List<dynamic>? _tags) => super.noSuchMethod(
        Invocation.setter(
          #tags,
          _tags,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get supportedLocale => (super.noSuchMethod(
        Invocation.getter(#supportedLocale),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set supportedLocale(List<dynamic>? _supportedLocale) => super.noSuchMethod(
        Invocation.setter(
          #supportedLocale,
          _supportedLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set familyName(String? _familyName) => super.noSuchMethod(
        Invocation.setter(
          #familyName,
          _familyName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set familyShortName(String? _familyShortName) => super.noSuchMethod(
        Invocation.setter(
          #familyShortName,
          _familyShortName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);

  @override
  set isActive(bool? _isActive) => super.noSuchMethod(
        Invocation.setter(
          #isActive,
          _isActive,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creationTime(DateTime? _creationTime) => super.noSuchMethod(
        Invocation.setter(
          #creationTime,
          _creationTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set patientId(String? _patientId) => super.noSuchMethod(
        Invocation.setter(
          #patientId,
          _patientId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set encounterId(String? _encounterId) => super.noSuchMethod(
        Invocation.setter(
          #encounterId,
          _encounterId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set index(int? _index) => super.noSuchMethod(
        Invocation.setter(
          #index,
          _index,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get rawValue => (super.noSuchMethod(
        Invocation.getter(#rawValue),
        returnValue: 0.0,
      ) as double);

  @override
  set rawValue(double? _rawValue) => super.noSuchMethod(
        Invocation.setter(
          #rawValue,
          _rawValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set summaryDataToBeModified(
          List<Map<String, String>>? _summaryDataToBeModified) =>
      super.noSuchMethod(
        Invocation.setter(
          #summaryDataToBeModified,
          _summaryDataToBeModified,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isPopulated => (super.noSuchMethod(
        Invocation.getter(#isPopulated),
        returnValue: false,
      ) as bool);

  @override
  set isPopulated(bool? _isPopulated) => super.noSuchMethod(
        Invocation.setter(
          #isPopulated,
          _isPopulated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get numOfGraph => (super.noSuchMethod(
        Invocation.getter(#numOfGraph),
        returnValue: 0,
      ) as int);

  @override
  set numOfGraph(int? _numOfGraph) => super.noSuchMethod(
        Invocation.setter(
          #numOfGraph,
          _numOfGraph,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSelected => (super.noSuchMethod(
        Invocation.getter(#isSelected),
        returnValue: false,
      ) as bool);

  @override
  set isSelected(bool? _isSelected) => super.noSuchMethod(
        Invocation.setter(
          #isSelected,
          _isSelected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.QuestionCollection get questionCollection => (super.noSuchMethod(
        Invocation.getter(#questionCollection),
        returnValue: _FakeQuestionCollection_1(
          this,
          Invocation.getter(#questionCollection),
        ),
      ) as _i3.QuestionCollection);

  @override
  set questionCollection(_i3.QuestionCollection? _questionCollection) =>
      super.noSuchMethod(
        Invocation.setter(
          #questionCollection,
          _questionCollection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set data(Map<String, dynamic>? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set outcomeMeasureCreatedTimeString(
          String? _outcomeMeasureCreatedTimeString) =>
      super.noSuchMethod(
        Invocation.setter(
          #outcomeMeasureCreatedTimeString,
          _outcomeMeasureCreatedTimeString,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get currentTime => (super.noSuchMethod(
        Invocation.getter(#currentTime),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#currentTime),
        ),
      ) as String);

  @override
  set currentTime(String? _currentTime) => super.noSuchMethod(
        Invocation.setter(
          #currentTime,
          _currentTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get rawName => (super.noSuchMethod(
        Invocation.getter(#rawName),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#rawName),
        ),
      ) as String);

  @override
  String get rawShortName => (super.noSuchMethod(
        Invocation.getter(#rawShortName),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#rawShortName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get shortName => (super.noSuchMethod(
        Invocation.getter(#shortName),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#shortName),
        ),
      ) as String);

  @override
  String get chartYAxisTitle => (super.noSuchMethod(
        Invocation.getter(#chartYAxisTitle),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#chartYAxisTitle),
        ),
      ) as String);

  @override
  bool get isComplete => (super.noSuchMethod(
        Invocation.getter(#isComplete),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get totalScore => (super.noSuchMethod(
        Invocation.getter(#totalScore),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void copyOutcomeMeasureTemplateData() => super.noSuchMethod(
        Invocation.method(
          #copyOutcomeMeasureTemplateData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double calculateScore() => (super.noSuchMethod(
        Invocation.method(
          #calculateScore,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool canProceed() => (super.noSuchMethod(
        Invocation.method(
          #canProceed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i20.Future<void> build({bool? shouldLocalize = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
          {#shouldLocalize: shouldLocalize},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<dynamic> buildInfo() => (super.noSuchMethod(
        Invocation.method(
          #buildInfo,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<void> buildQuestions({bool? shouldLocalize = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildQuestions,
          [],
          {#shouldLocalize: shouldLocalize},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<dynamic> populate() => (super.noSuchMethod(
        Invocation.method(
          #populate,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  void populateWithJson(Map<String, dynamic>? json) => super.noSuchMethod(
        Invocation.method(
          #populateWithJson,
          [json],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.TimeSeriesChartData outcomeMeasureChartData() => (super.noSuchMethod(
        Invocation.method(
          #outcomeMeasureChartData,
          [],
        ),
        returnValue: _FakeTimeSeriesChartData_2(
          this,
          Invocation.method(
            #outcomeMeasureChartData,
            [],
          ),
        ),
      ) as _i4.TimeSeriesChartData);

  @override
  String getSummaryScoreTitle(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getSummaryScoreTitle,
          [index],
        ),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.method(
            #getSummaryScoreTitle,
            [index],
          ),
        ),
      ) as String);

  @override
  (double, _i19.ChangeDirection) compareScoreAgainstPrev(
          _i8.OutcomeMeasure? outcomeMeasureToCompare) =>
      (super.noSuchMethod(
        Invocation.method(
          #compareScoreAgainstPrev,
          [outcomeMeasureToCompare],
        ),
        returnValue: (0.0, _i19.ChangeDirection.stable),
      ) as (double, _i19.ChangeDirection));

  @override
  Map<String, dynamic> toJson(
    String? ownerOrganizationId,
    _i21.Patient? patient,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [
            ownerOrganizationId,
            patient,
            index,
          ],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> exportResponses(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #exportResponses,
          [locale],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i22.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i23.GlobalKey<_i23.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i23.GlobalKey<_i23.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i22.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<T?>? navigateWithTransition<T>(
    _i23.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i23.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i22.Transition? transitionClass,
    _i22.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? replaceWithTransition<T>(
    _i23.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i23.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i22.Transition? transitionClass,
    _i22.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i23.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i23.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? navigateToView<T>(
    _i23.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i23.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i22.Transition? transition,
    _i22.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i23.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? clearStackAndShowView<T>(
    _i23.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? clearTillFirstAndShowView<T>(
    _i23.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);

  @override
  _i20.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i23.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i20.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i22.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i22.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<_i22.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i20.Future<_i22.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i20.Future<_i22.SheetResponse<dynamic>?>.value(),
      ) as _i20.Future<_i22.SheetResponse<dynamic>?>);

  @override
  _i20.Future<_i22.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i16.Color? barrierColor = const _i16.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i20.Future<_i22.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i20.Future<_i22.SheetResponse<T>?>.value(),
      ) as _i20.Future<_i22.SheetResponse<T>?>);

  @override
  void completeSheet(_i22.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i22.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i22.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i23.Widget Function(
      _i23.BuildContext,
      _i22.DialogRequest<dynamic>,
      dynamic Function(_i22.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<_i22.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i16.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i16.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i22.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i20.Future<_i22.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i20.Future<_i22.DialogResponse<dynamic>?>.value(),
      ) as _i20.Future<_i22.DialogResponse<dynamic>?>);

  @override
  _i20.Future<_i22.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i16.Color? barrierColor = const _i16.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i20.Future<_i22.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i20.Future<_i22.DialogResponse<T>?>.value(),
      ) as _i20.Future<_i22.DialogResponse<T>?>);

  @override
  _i20.Future<_i22.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i16.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i16.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i22.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i20.Future<_i22.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i20.Future<_i22.DialogResponse<dynamic>?>.value(),
      ) as _i20.Future<_i22.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i22.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BiotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiotService extends _i1.Mock implements _i24.BiotService {
  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
      ) as String);

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set caregiverId(String? _caregiverId) => super.noSuchMethod(
        Invocation.setter(
          #caregiverId,
          _caregiverId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set caregiverName(String? _caregiverName) => super.noSuchMethod(
        Invocation.setter(
          #caregiverName,
          _caregiverName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get ownerOrganizationId => (super.noSuchMethod(
        Invocation.getter(#ownerOrganizationId),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#ownerOrganizationId),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.getter(#ownerOrganizationId),
        ),
      ) as String);

  @override
  set ownerOrganizationId(String? _ownerOrganizationId) => super.noSuchMethod(
        Invocation.setter(
          #ownerOrganizationId,
          _ownerOrganizationId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set updateTime(DateTime? _updateTime) => super.noSuchMethod(
        Invocation.setter(
          #updateTime,
          _updateTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get requestHeaders => (super.noSuchMethod(
        Invocation.getter(#requestHeaders),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get requestHeadersAuthorization => (super.noSuchMethod(
        Invocation.getter(#requestHeadersAuthorization),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get requestHeadersConfirmEmail => (super.noSuchMethod(
        Invocation.getter(#requestHeadersConfirmEmail),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get requestHeadersForgotPassword => (super.noSuchMethod(
        Invocation.getter(#requestHeadersForgotPassword),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  _i20.Future<List<_i8.OutcomeMeasure>> getOutcomeMeasureHistory(
    _i25.Client? client, {
    bool? isRetry = false,
    required _i21.Patient? patient,
    required _i8.OutcomeMeasure? outcomeMeasure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasureHistory,
          [client],
          {
            #isRetry: isRetry,
            #patient: patient,
            #outcomeMeasure: outcomeMeasure,
          },
        ),
        returnValue:
            _i20.Future<List<_i8.OutcomeMeasure>>.value(<_i8.OutcomeMeasure>[]),
        returnValueForMissingStub:
            _i20.Future<List<_i8.OutcomeMeasure>>.value(<_i8.OutcomeMeasure>[]),
      ) as _i20.Future<List<_i8.OutcomeMeasure>>);

  @override
  _i20.Future<_i26.PeripheralDevice?> getUsageSession(
    _i25.Client? client, {
    bool? isRetry = false,
    required String? usageSessionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsageSession,
          [client],
          {
            #isRetry: isRetry,
            #usageSessionId: usageSessionId,
          },
        ),
        returnValue: _i20.Future<_i26.PeripheralDevice?>.value(),
        returnValueForMissingStub: _i20.Future<_i26.PeripheralDevice?>.value(),
      ) as _i20.Future<_i26.PeripheralDevice?>);

  @override
  _i20.Future<Map<String, List<_i27.Encounter>>> getUsageSessions(
    _i25.Client? client, {
    required String? patientId,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsageSessions,
          [client],
          {
            #patientId: patientId,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<Map<String, List<_i27.Encounter>>>.value(
            <String, List<_i27.Encounter>>{}),
        returnValueForMissingStub:
            _i20.Future<Map<String, List<_i27.Encounter>>>.value(
                <String, List<_i27.Encounter>>{}),
      ) as _i20.Future<Map<String, List<_i27.Encounter>>>);

  @override
  _i20.Future<_i27.Encounter?> addUsageEncounter(
    _i25.Client? client, {
    required _i26.PeripheralDevice? usageEncounter,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUsageEncounter,
          [client],
          {
            #usageEncounter: usageEncounter,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<_i27.Encounter?>.value(),
        returnValueForMissingStub: _i20.Future<_i27.Encounter?>.value(),
      ) as _i20.Future<_i27.Encounter?>);

  @override
  _i20.Future<Map<String, String>> uploadFileId(
    _i25.Client? client, {
    required String? deviceId,
    required _i21.Patient? patient,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFileId,
          [client],
          {
            #deviceId: deviceId,
            #patient: patient,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i20.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i20.Future<Map<String, String>>);

  @override
  _i20.Future<void> uploadFile({
    required String? signedUrl,
    required String? filePath,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [],
          {
            #signedUrl: signedUrl,
            #filePath: filePath,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> downloadFile({required dynamic fileId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [],
          {#fileId: fileId},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<Map<String, String>> getFileById(
    _i25.Client? client, {
    required String? fileId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileById,
          [client],
          {#fileId: fileId},
        ),
        returnValue: _i20.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i20.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i20.Future<Map<String, String>>);

  @override
  _i20.Future<String> getFile({required String? signedUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFile,
          [],
          {#signedUrl: signedUrl},
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #getFile,
            [],
            {#signedUrl: signedUrl},
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #getFile,
            [],
            {#signedUrl: signedUrl},
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<int> addMeasurement(
    _i25.Client? client,
    DateTime? time,
    int? totalSteps, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMeasurement,
          [
            client,
            time,
            totalSteps,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<int>.value(0),
        returnValueForMissingStub: _i20.Future<int>.value(0),
      ) as _i20.Future<int>);

  @override
  _i20.Future<void> loginWithCredentials(
    _i25.Client? client,
    dynamic id,
    dynamic pwd,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithCredentials,
          [
            client,
            id,
            pwd,
          ],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> refreshTokens(
    _i25.Client? client,
    dynamic refreshToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshTokens,
          [
            client,
            refreshToken,
          ],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> logOut(_i25.Client? client) => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [client],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> forgotPassword(
    _i25.Client? client,
    String? username,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [
            client,
            username,
          ],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<List<_i21.Patient>> getPatients(
    _i25.Client? client, {
    bool? isRetry = false,
    String? caregiverId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPatients,
          [client],
          {
            #isRetry: isRetry,
            #caregiverId: caregiverId,
          },
        ),
        returnValue: _i20.Future<List<_i21.Patient>>.value(<_i21.Patient>[]),
        returnValueForMissingStub:
            _i20.Future<List<_i21.Patient>>.value(<_i21.Patient>[]),
      ) as _i20.Future<List<_i21.Patient>>);

  @override
  _i20.Future<String> addPatient(
    _i25.Client? client, {
    bool? isRetry = false,
    required _i21.Patient? patient,
    List<_i28.Device>? deviceList,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPatient,
          [client],
          {
            #isRetry: isRetry,
            #patient: patient,
            #deviceList: deviceList,
          },
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addPatient,
            [client],
            {
              #isRetry: isRetry,
              #patient: patient,
              #deviceList: deviceList,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addPatient,
            [client],
            {
              #isRetry: isRetry,
              #patient: patient,
              #deviceList: deviceList,
            },
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<void> editPatient(
    _i25.Client? client,
    _i21.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPatient,
          [
            client,
            patient,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deletePatient(
    _i25.Client? client,
    _i21.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePatient,
          [
            client,
            patient,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<String> addDomainWeightDistribution(
    _i25.Client? client, {
    required String? patientName,
    required _i5.DomainWeightDistribution? domainWeightDist,
    String? date,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDomainWeightDistribution,
          [client],
          {
            #patientName: patientName,
            #domainWeightDist: domainWeightDist,
            #date: date,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addDomainWeightDistribution,
            [client],
            {
              #patientName: patientName,
              #domainWeightDist: domainWeightDist,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addDomainWeightDistribution,
            [client],
            {
              #patientName: patientName,
              #domainWeightDist: domainWeightDist,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<_i5.DomainWeightDistribution> getDomainWeightDistribution(
    _i25.Client? client, {
    bool? isRetry = false,
    required String? domainWeightDistributionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDomainWeightDistribution,
          [client],
          {
            #isRetry: isRetry,
            #domainWeightDistributionId: domainWeightDistributionId,
          },
        ),
        returnValue: _i20.Future<_i5.DomainWeightDistribution>.value(
            _FakeDomainWeightDistribution_3(
          this,
          Invocation.method(
            #getDomainWeightDistribution,
            [client],
            {
              #isRetry: isRetry,
              #domainWeightDistributionId: domainWeightDistributionId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i5.DomainWeightDistribution>.value(
                _FakeDomainWeightDistribution_3(
          this,
          Invocation.method(
            #getDomainWeightDistribution,
            [client],
            {
              #isRetry: isRetry,
              #domainWeightDistributionId: domainWeightDistributionId,
            },
          ),
        )),
      ) as _i20.Future<_i5.DomainWeightDistribution>);

  @override
  _i20.Future<void> editDomainWeightDistribution(
    _i25.Client? client,
    _i21.Patient? patient, {
    required String? domainWeightDistId,
    required _i5.DomainWeightDistribution? domainWeightDistribution,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editDomainWeightDistribution,
          [
            client,
            patient,
          ],
          {
            #domainWeightDistId: domainWeightDistId,
            #domainWeightDistribution: domainWeightDistribution,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteDomainWeightDistribution(
    _i25.Client? client, {
    required String? domainWeightDistId,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDomainWeightDistribution,
          [client],
          {
            #domainWeightDistId: domainWeightDistId,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> addDomainScores(
    _i25.Client? client, {
    required _i21.Patient? patient,
    required _i27.Encounter? encounter,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDomainScores,
          [client],
          {
            #patient: patient,
            #encounter: encounter,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<List<dynamic>> getDomainScores(
    _i25.Client? client,
    String? patientId, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDomainScores,
          [
            client,
            patientId,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<void> deleteDomainScores(
    _i25.Client? client, {
    required String? domainScoresId,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDomainScores,
          [client],
          {
            #domainScoresId: domainScoresId,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<String> addKLevel(
    _i25.Client? client, {
    required String? patientName,
    required _i6.KLevel? kLevel,
    String? date,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addKLevel,
          [client],
          {
            #patientName: patientName,
            #kLevel: kLevel,
            #date: date,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addKLevel,
            [client],
            {
              #patientName: patientName,
              #kLevel: kLevel,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addKLevel,
            [client],
            {
              #patientName: patientName,
              #kLevel: kLevel,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<_i6.KLevel> getKLevel(
    _i25.Client? client, {
    bool? isRetry = false,
    required String? kLevelId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getKLevel,
          [client],
          {
            #isRetry: isRetry,
            #kLevelId: kLevelId,
          },
        ),
        returnValue: _i20.Future<_i6.KLevel>.value(_FakeKLevel_4(
          this,
          Invocation.method(
            #getKLevel,
            [client],
            {
              #isRetry: isRetry,
              #kLevelId: kLevelId,
            },
          ),
        )),
        returnValueForMissingStub: _i20.Future<_i6.KLevel>.value(_FakeKLevel_4(
          this,
          Invocation.method(
            #getKLevel,
            [client],
            {
              #isRetry: isRetry,
              #kLevelId: kLevelId,
            },
          ),
        )),
      ) as _i20.Future<_i6.KLevel>);

  @override
  _i20.Future<void> editKLevel(
    _i25.Client? client,
    _i21.Patient? patient, {
    required String? kLevelId,
    required _i6.KLevel? kLevel,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editKLevel,
          [
            client,
            patient,
          ],
          {
            #kLevelId: kLevelId,
            #kLevel: kLevel,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteKLevel(
    _i25.Client? client, {
    required String? kLevelId,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteKLevel,
          [client],
          {
            #kLevelId: kLevelId,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<List<String>> addDevices(
    _i25.Client? client,
    List<_i28.Device>? deviceList,
    String? patientName, {
    String? date,
    String? patientId,
    _i27.Encounter? encounter,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDevices,
          [
            client,
            deviceList,
            patientName,
          ],
          {
            #date: date,
            #patientId: patientId,
            #encounter: encounter,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i20.Future<List<String>>.value(<String>[]),
      ) as _i20.Future<List<String>>);

  @override
  _i20.Future<String> addDevice(
    _i25.Client? client,
    _i28.Device? device,
    String? patientName, {
    String? date,
    String? patientId,
    _i27.Encounter? encounter,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDevice,
          [
            client,
            device,
            patientName,
          ],
          {
            #date: date,
            #patientId: patientId,
            #encounter: encounter,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addDevice,
            [
              client,
              device,
              patientName,
            ],
            {
              #date: date,
              #patientId: patientId,
              #encounter: encounter,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addDevice,
            [
              client,
              device,
              patientName,
            ],
            {
              #date: date,
              #patientId: patientId,
              #encounter: encounter,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<List<_i28.Device>> getDevices(
    _i25.Client? client, {
    bool? isRetry = false,
    String? patientId,
    String? encounterId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevices,
          [client],
          {
            #isRetry: isRetry,
            #patientId: patientId,
            #encounterId: encounterId,
          },
        ),
        returnValue: _i20.Future<List<_i28.Device>>.value(<_i28.Device>[]),
        returnValueForMissingStub:
            _i20.Future<List<_i28.Device>>.value(<_i28.Device>[]),
      ) as _i20.Future<List<_i28.Device>>);

  @override
  _i20.Future<void> editDevice(
    _i25.Client? client, {
    required _i28.Device? device,
    bool? isRetry = false,
    required String? patientName,
    String? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editDevice,
          [client],
          {
            #device: device,
            #isRetry: isRetry,
            #patientName: patientName,
            #date: date,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteDevices(
    _i25.Client? client,
    List<_i28.Device>? deviceList, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevices,
          [
            client,
            deviceList,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteDevice(
    _i25.Client? client, {
    required String? deviceId,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevice,
          [client],
          {
            #deviceId: deviceId,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<String> addCondition(
    _i25.Client? client,
    _i7.Condition? condition,
    String? patientName, {
    String? date,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCondition,
          [
            client,
            condition,
            patientName,
          ],
          {
            #date: date,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addCondition,
            [
              client,
              condition,
              patientName,
            ],
            {
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addCondition,
            [
              client,
              condition,
              patientName,
            ],
            {
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<_i7.Condition> getCondition(
    _i25.Client? client, {
    bool? isRetry = false,
    required String? conditionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCondition,
          [client],
          {
            #isRetry: isRetry,
            #conditionId: conditionId,
          },
        ),
        returnValue: _i20.Future<_i7.Condition>.value(_FakeCondition_5(
          this,
          Invocation.method(
            #getCondition,
            [client],
            {
              #isRetry: isRetry,
              #conditionId: conditionId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Condition>.value(_FakeCondition_5(
          this,
          Invocation.method(
            #getCondition,
            [client],
            {
              #isRetry: isRetry,
              #conditionId: conditionId,
            },
          ),
        )),
      ) as _i20.Future<_i7.Condition>);

  @override
  _i20.Future<void> editCondition(
    _i25.Client? client,
    _i21.Patient? patient, {
    required String? conditionId,
    required _i7.Condition? condition,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editCondition,
          [
            client,
            patient,
          ],
          {
            #conditionId: conditionId,
            #condition: condition,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteCondition(
    _i25.Client? client, {
    required String? conditionsId,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCondition,
          [client],
          {
            #conditionsId: conditionsId,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<List<_i27.Encounter>> getEncounters(
    _i25.Client? client, {
    required String? patient,
    String? deviceId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEncounters,
          [client],
          {
            #patientEntityId: patient,
            #deviceId: deviceId,
          },
        ),
        returnValue:
            _i20.Future<List<_i27.Encounter>>.value(<_i27.Encounter>[]),
        returnValueForMissingStub:
            _i20.Future<List<_i27.Encounter>>.value(<_i27.Encounter>[]),
      ) as _i20.Future<List<_i27.Encounter>>);

  @override
  _i20.Future<List<_i27.Encounter>> getOutcomeMeasureEncounters(
    _i25.Client? client, {
    bool? isRetry = false,
    required String? patient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasureEncounters,
          [client],
          {
            #isRetry: isRetry,
            #patientId: patient,
          },
        ),
        returnValue:
            _i20.Future<List<_i27.Encounter>>.value(<_i27.Encounter>[]),
        returnValueForMissingStub:
            _i20.Future<List<_i27.Encounter>>.value(<_i27.Encounter>[]),
      ) as _i20.Future<List<_i27.Encounter>>);

  @override
  _i20.Future<List<_i8.OutcomeMeasure>> getOutcomeMeasures(
          _i27.Encounter? encounter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasures,
          [encounter],
        ),
        returnValue:
            _i20.Future<List<_i8.OutcomeMeasure>>.value(<_i8.OutcomeMeasure>[]),
        returnValueForMissingStub:
            _i20.Future<List<_i8.OutcomeMeasure>>.value(<_i8.OutcomeMeasure>[]),
      ) as _i20.Future<List<_i8.OutcomeMeasure>>);

  @override
  _i20.Future<_i8.OutcomeMeasure> getOutcomeMeasure(
    _i25.Client? client, {
    bool? isRetry = false,
    required _i8.OutcomeMeasure? outcomeMeasure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasure,
          [client],
          {
            #isRetry: isRetry,
            #outcomeMeasure: outcomeMeasure,
          },
        ),
        returnValue:
            _i20.Future<_i8.OutcomeMeasure>.value(_FakeOutcomeMeasure_6(
          this,
          Invocation.method(
            #getOutcomeMeasure,
            [client],
            {
              #isRetry: isRetry,
              #outcomeMeasure: outcomeMeasure,
            },
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i8.OutcomeMeasure>.value(_FakeOutcomeMeasure_6(
          this,
          Invocation.method(
            #getOutcomeMeasure,
            [client],
            {
              #isRetry: isRetry,
              #outcomeMeasure: outcomeMeasure,
            },
          ),
        )),
      ) as _i20.Future<_i8.OutcomeMeasure>);

  @override
  _i20.Future<void> addEncounter(
    _i25.Client? client,
    _i27.Encounter? encounter, {
    required _i21.Patient? patient,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEncounter,
          [
            client,
            encounter,
          ],
          {
            #patient: patient,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<List<String>> addOutcomeMeasures(
    List<_i8.OutcomeMeasure>? outcomeMeasures,
    _i21.Patient? patient,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasures,
          [
            outcomeMeasures,
            patient,
          ],
        ),
        returnValue: _i20.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i20.Future<List<String>>.value(<String>[]),
      ) as _i20.Future<List<String>>);

  @override
  _i20.Future<String> addOutcomeMeasure(
    _i25.Client? client,
    int? index,
    _i8.OutcomeMeasure? outcomeMeasure,
    _i21.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasure,
          [
            client,
            index,
            outcomeMeasure,
            patient,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addOutcomeMeasure,
            [
              client,
              index,
              outcomeMeasure,
              patient,
            ],
            {#isRetry: isRetry},
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #addOutcomeMeasure,
            [
              client,
              index,
              outcomeMeasure,
              patient,
            ],
            {#isRetry: isRetry},
          ),
        )),
      ) as _i20.Future<String>);

  @override
  _i20.Future<void> deleteEncounter(
    _i25.Client? client,
    _i27.Encounter? session, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEncounter,
          [
            client,
            session,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteOutcomeMeasures(
          List<_i8.OutcomeMeasure>? outcomeMeasures) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOutcomeMeasures,
          [outcomeMeasures],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> deleteOutcomeMeasure(
    _i25.Client? client, {
    required String? id,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOutcomeMeasure,
          [client],
          {
            #id: id,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> getCaregiverById(
    _i25.Client? client, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCaregiverById,
          [client],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<void> sendSms(
    _i25.Client? client,
    String? message,
    String? phoneNumber, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSms,
          [
            client,
            message,
            phoneNumber,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i29.DatabaseService {
  @override
  _i9.Box<_i21.Patient> get patientsBox => (super.noSuchMethod(
        Invocation.getter(#patientsBox),
        returnValue: _FakeBox_7<_i21.Patient>(
          this,
          Invocation.getter(#patientsBox),
        ),
        returnValueForMissingStub: _FakeBox_7<_i21.Patient>(
          this,
          Invocation.getter(#patientsBox),
        ),
      ) as _i9.Box<_i21.Patient>);

  @override
  set patientsBox(_i9.Box<_i21.Patient>? _patientsBox) => super.noSuchMethod(
        Invocation.setter(
          #patientsBox,
          _patientsBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set currentPatient(_i11.ReactiveValue<_i21.Patient>? _currentPatient) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentPatient,
          _currentPatient,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onCurrentPatientDataChanged(Function? _onCurrentPatientDataChanged) =>
      super.noSuchMethod(
        Invocation.setter(
          #onCurrentPatientDataChanged,
          _onCurrentPatientDataChanged,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void updateCurrentPatient() => super.noSuchMethod(
        Invocation.method(
          #updateCurrentPatient,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPatient(_i21.Patient? patient) => super.noSuchMethod(
        Invocation.method(
          #addPatient,
          [patient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deletePatient(dynamic patientId) => super.noSuchMethod(
        Invocation.method(
          #deletePatient,
          [patientId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void editPatient(_i21.Patient? patient) => super.noSuchMethod(
        Invocation.method(
          #editPatient,
          [patient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesService extends _i1.Mock
    implements _i30.SharedPreferencesService {}

/// A class which mocks [PackageInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoService extends _i1.Mock
    implements _i31.PackageInfoService {
  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i32.FileService {
  @override
  _i20.Future<_i10.File> writeFile(
    String? fileBody,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFile,
          [
            fileBody,
            fileName,
          ],
        ),
        returnValue: _i20.Future<_i10.File>.value(_FakeFile_8(
          this,
          Invocation.method(
            #writeFile,
            [
              fileBody,
              fileName,
            ],
          ),
        )),
        returnValueForMissingStub: _i20.Future<_i10.File>.value(_FakeFile_8(
          this,
          Invocation.method(
            #writeFile,
            [
              fileBody,
              fileName,
            ],
          ),
        )),
      ) as _i20.Future<_i10.File>);
}

/// A class which mocks [OutcomeMeasureSelectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutcomeMeasureSelectionService extends _i1.Mock
    implements _i33.OutcomeMeasureSelectionService {
  @override
  _i11.ReactiveValue<List<_i8.OutcomeMeasure>> get individualOutcomeMeasures =>
      (super.noSuchMethod(
        Invocation.getter(#individualOutcomeMeasures),
        returnValue: _FakeReactiveValue_9<List<_i8.OutcomeMeasure>>(
          this,
          Invocation.getter(#individualOutcomeMeasures),
        ),
        returnValueForMissingStub:
            _FakeReactiveValue_9<List<_i8.OutcomeMeasure>>(
          this,
          Invocation.getter(#individualOutcomeMeasures),
        ),
      ) as _i11.ReactiveValue<List<_i8.OutcomeMeasure>>);

  @override
  set individualOutcomeMeasures(
          _i11.ReactiveValue<List<_i8.OutcomeMeasure>>?
              _individualOutcomeMeasures) =>
      super.noSuchMethod(
        Invocation.setter(
          #individualOutcomeMeasures,
          _individualOutcomeMeasures,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.ReactiveValue<List<_i12.OutcomeMeasureCollection>>
      get outcomeMeasureCollections => (super.noSuchMethod(
            Invocation.getter(#outcomeMeasureCollections),
            returnValue:
                _FakeReactiveValue_9<List<_i12.OutcomeMeasureCollection>>(
              this,
              Invocation.getter(#outcomeMeasureCollections),
            ),
            returnValueForMissingStub:
                _FakeReactiveValue_9<List<_i12.OutcomeMeasureCollection>>(
              this,
              Invocation.getter(#outcomeMeasureCollections),
            ),
          ) as _i11.ReactiveValue<List<_i12.OutcomeMeasureCollection>>);

  @override
  set outcomeMeasureCollections(
          _i11.ReactiveValue<List<_i12.OutcomeMeasureCollection>>?
              _outcomeMeasureCollections) =>
      super.noSuchMethod(
        Invocation.setter(
          #outcomeMeasureCollections,
          _outcomeMeasureCollections,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.OutcomeMeasure> get selectedOutcomeMeasures => (super.noSuchMethod(
        Invocation.getter(#selectedOutcomeMeasures),
        returnValue: <_i8.OutcomeMeasure>[],
        returnValueForMissingStub: <_i8.OutcomeMeasure>[],
      ) as List<_i8.OutcomeMeasure>);

  @override
  Map<_i19.DomainType, List<_i8.OutcomeMeasure>>
      get outcomeMeasuresMapByDomainType => (super.noSuchMethod(
            Invocation.getter(#outcomeMeasuresMapByDomainType),
            returnValue: <_i19.DomainType, List<_i8.OutcomeMeasure>>{},
            returnValueForMissingStub: <_i19.DomainType,
                List<_i8.OutcomeMeasure>>{},
          ) as Map<_i19.DomainType, List<_i8.OutcomeMeasure>>);

  @override
  int get patientTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#patientTimeToComplete),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get assistantTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#assistantTimeToComplete),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get clinicianTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#clinicianTimeToComplete),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOutcomeMeasure(_i8.OutcomeMeasure? outcomeMeasure) =>
      super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasure,
          [outcomeMeasure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeOutcomeMeasure(_i8.OutcomeMeasure? outcomeMeasure) =>
      super.noSuchMethod(
        Invocation.method(
          #removeOutcomeMeasure,
          [outcomeMeasure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOutcomeMeasureCollection(
          _i12.OutcomeMeasureCollection? outcomeMeasureCollection) =>
      super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasureCollection,
          [outcomeMeasureCollection],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeOutcomeMeasureCollection(
          _i12.OutcomeMeasureCollection? outcomeMeasureCollection) =>
      super.noSuchMethod(
        Invocation.method(
          #removeOutcomeMeasureCollection,
          [outcomeMeasureCollection],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OutcomeMeasureLoadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutcomeMeasureLoadService extends _i1.Mock
    implements _i34.OutcomeMeasureLoadService {
  @override
  List<dynamic> get allOutcomeMeasuresJson => (super.noSuchMethod(
        Invocation.getter(#allOutcomeMeasuresJson),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as List<dynamic>);

  @override
  set allOutcomeMeasuresJson(List<dynamic>? _allOutcomeMeasuresJson) =>
      super.noSuchMethod(
        Invocation.setter(
          #allOutcomeMeasuresJson,
          _allOutcomeMeasuresJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.OutcomeMeasureCollection get allOutcomeMeasures => (super.noSuchMethod(
        Invocation.getter(#allOutcomeMeasures),
        returnValue: _FakeOutcomeMeasureCollection_10(
          this,
          Invocation.getter(#allOutcomeMeasures),
        ),
        returnValueForMissingStub: _FakeOutcomeMeasureCollection_10(
          this,
          Invocation.getter(#allOutcomeMeasures),
        ),
      ) as _i12.OutcomeMeasureCollection);

  @override
  set allOutcomeMeasures(_i12.OutcomeMeasureCollection? _allOutcomeMeasures) =>
      super.noSuchMethod(
        Invocation.setter(
          #allOutcomeMeasures,
          _allOutcomeMeasures,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i12.OutcomeMeasureCollection> get defaultOutcomeMeasureCollections =>
      (super.noSuchMethod(
        Invocation.getter(#defaultOutcomeMeasureCollections),
        returnValue: <_i12.OutcomeMeasureCollection>[],
        returnValueForMissingStub: <_i12.OutcomeMeasureCollection>[],
      ) as List<_i12.OutcomeMeasureCollection>);

  @override
  set defaultOutcomeMeasureCollections(
          List<_i12.OutcomeMeasureCollection>?
              _defaultOutcomeMeasureCollections) =>
      super.noSuchMethod(
        Invocation.setter(
          #defaultOutcomeMeasureCollections,
          _defaultOutcomeMeasureCollections,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<_i12.OutcomeMeasureCollection> getAllOutcomeMeasures(
          String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOutcomeMeasures,
          [fileName],
        ),
        returnValue: _i20.Future<_i12.OutcomeMeasureCollection>.value(
            _FakeOutcomeMeasureCollection_10(
          this,
          Invocation.method(
            #getAllOutcomeMeasures,
            [fileName],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i12.OutcomeMeasureCollection>.value(
                _FakeOutcomeMeasureCollection_10(
          this,
          Invocation.method(
            #getAllOutcomeMeasures,
            [fileName],
          ),
        )),
      ) as _i20.Future<_i12.OutcomeMeasureCollection>);

  @override
  _i20.Future<void> getOutcomeMeasureCollections(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasureCollections,
          [fileName],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  _i20.Future<List<dynamic>> getOutcomeQuestions(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeQuestions,
          [fileName],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<dynamic> getOutcomeInfo(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #getOutcomeInfo,
          [fileName],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);
}

/// A class which mocks [PdfService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPdfService extends _i1.Mock implements _i35.PdfService {
  @override
  _i13.NumberFormat get numberFormatter => (super.noSuchMethod(
        Invocation.getter(#numberFormatter),
        returnValue: _FakeNumberFormat_11(
          this,
          Invocation.getter(#numberFormatter),
        ),
        returnValueForMissingStub: _FakeNumberFormat_11(
          this,
          Invocation.getter(#numberFormatter),
        ),
      ) as _i13.NumberFormat);

  @override
  set numberFormatter(_i13.NumberFormat? _numberFormatter) =>
      super.noSuchMethod(
        Invocation.setter(
          #numberFormatter,
          _numberFormatter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get dirPath => (super.noSuchMethod(
        Invocation.getter(#dirPath),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#dirPath),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.getter(#dirPath),
        ),
      ) as String);

  @override
  set dirPath(String? _dirPath) => super.noSuchMethod(
        Invocation.setter(
          #dirPath,
          _dirPath,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<_i14.MergeMultiplePDFResponse> exportPdf(
    _i23.BuildContext? context,
    _i27.Encounter? encounter,
    _i21.Patient? patient, {
    String? locale = r'en',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportPdf,
          [
            context,
            encounter,
            patient,
          ],
          {#locale: locale},
        ),
        returnValue: _i20.Future<_i14.MergeMultiplePDFResponse>.value(
            _FakeMergeMultiplePDFResponse_12(
          this,
          Invocation.method(
            #exportPdf,
            [
              context,
              encounter,
              patient,
            ],
            {#locale: locale},
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i14.MergeMultiplePDFResponse>.value(
                _FakeMergeMultiplePDFResponse_12(
          this,
          Invocation.method(
            #exportPdf,
            [
              context,
              encounter,
              patient,
            ],
            {#locale: locale},
          ),
        )),
      ) as _i20.Future<_i14.MergeMultiplePDFResponse>);
}

/// A class which mocks [FileSaverService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSaverService extends _i1.Mock implements _i36.FileSaverService {
  @override
  _i20.Future<_i15.ShareResult> saveAndShareFile(
    List<int>? bytes,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAndShareFile,
          [
            bytes,
            fileName,
          ],
        ),
        returnValue: _i20.Future<_i15.ShareResult>.value(_FakeShareResult_13(
          this,
          Invocation.method(
            #saveAndShareFile,
            [
              bytes,
              fileName,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i15.ShareResult>.value(_FakeShareResult_13(
          this,
          Invocation.method(
            #saveAndShareFile,
            [
              bytes,
              fileName,
            ],
          ),
        )),
      ) as _i20.Future<_i15.ShareResult>);
}

/// A class which mocks [AppLocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLocaleService extends _i1.Mock implements _i37.AppLocaleService {
  @override
  Map<String, Map<String, dynamic>> get translations => (super.noSuchMethod(
        Invocation.getter(#translations),
        returnValue: <String, Map<String, dynamic>>{},
        returnValueForMissingStub: <String, Map<String, dynamic>>{},
      ) as Map<String, Map<String, dynamic>>);

  @override
  set translations(Map<String, Map<String, dynamic>>? _translations) =>
      super.noSuchMethod(
        Invocation.setter(
          #translations,
          _translations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_14(
          this,
          Invocation.getter(#locale),
        ),
        returnValueForMissingStub: _FakeLocale_14(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i16.Locale);

  @override
  String get localeToAppend => (super.noSuchMethod(
        Invocation.getter(#localeToAppend),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.getter(#localeToAppend),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.getter(#localeToAppend),
        ),
      ) as String);

  @override
  _i16.Locale get systemLocale => (super.noSuchMethod(
        Invocation.getter(#systemLocale),
        returnValue: _FakeLocale_14(
          this,
          Invocation.getter(#systemLocale),
        ),
        returnValueForMissingStub: _FakeLocale_14(
          this,
          Invocation.getter(#systemLocale),
        ),
      ) as _i16.Locale);

  @override
  set systemLocale(_i16.Locale? locale) => super.noSuchMethod(
        Invocation.setter(
          #systemLocale,
          locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void loadTranslations() => super.noSuchMethod(
        Invocation.method(
          #loadTranslations,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String tr(
    _i16.Locale? locale,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #tr,
          [
            locale,
            key,
          ],
        ),
        returnValue: _i18.dummyValue<String>(
          this,
          Invocation.method(
            #tr,
            [
              locale,
              key,
            ],
          ),
        ),
        returnValueForMissingStub: _i18.dummyValue<String>(
          this,
          Invocation.method(
            #tr,
            [
              locale,
              key,
            ],
          ),
        ),
      ) as String);

  @override
  void changeLocale(_i16.Locale? newLocale) => super.noSuchMethod(
        Invocation.method(
          #changeLocale,
          [newLocale],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetLocaleToDefaultSystemLocale() => super.noSuchMethod(
        Invocation.method(
          #resetLocaleToDefaultSystemLocale,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i38.LoggerService {
  @override
  _i17.Logger getLogger(
    String? className, {
    bool? printCallingFunctionName = true,
    bool? printCallstack = false,
    List<String>? exludeLogsFromClasses = const [],
    String? showOnlyClass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogger,
          [className],
          {
            #printCallingFunctionName: printCallingFunctionName,
            #printCallstack: printCallstack,
            #exludeLogsFromClasses: exludeLogsFromClasses,
            #showOnlyClass: showOnlyClass,
          },
        ),
        returnValue: _FakeLogger_15(
          this,
          Invocation.method(
            #getLogger,
            [className],
            {
              #printCallingFunctionName: printCallingFunctionName,
              #printCallstack: printCallstack,
              #exludeLogsFromClasses: exludeLogsFromClasses,
              #showOnlyClass: showOnlyClass,
            },
          ),
        ),
        returnValueForMissingStub: _FakeLogger_15(
          this,
          Invocation.method(
            #getLogger,
            [className],
            {
              #printCallingFunctionName: printCallingFunctionName,
              #printCallstack: printCallstack,
              #exludeLogsFromClasses: exludeLogsFromClasses,
              #showOnlyClass: showOnlyClass,
            },
          ),
        ),
      ) as _i17.Logger);
}
